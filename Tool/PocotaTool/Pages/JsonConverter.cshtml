@page
@using Net.Leksi.Pocota.Tool.Pages
@using Net.Leksi.Pocota.Tool
@model JsonConverterModel
@{
}
@Html.Partial("Header", Model)
public class @Model.ClassName@(Model.Inheritances.Count > 0 ? Html.Raw($": {string.Join(", ", Model.Inheritances)}") : string.Empty)
{
    private readonly IServiceProvider _services;
    private readonly @Model.ContractName@{}Context _dbContext;
    private readonly PocotaContext _context;
    public @Model.ClassName@{}(IServiceProvider services)
    {
        _services = services;
        _dbContext = _services.GetRequiredService@{}@Html.Raw($"<{Model.ContractName}Context>")@{}();
        _context = _services.GetRequiredService@{}@Html.Raw($"<PocotaContext>")@{}();

    }
    public override @Model.EntityTypeName? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        throw new NotImplementedException();
    }

    public override void Write(Utf8JsonWriter writer, @Model.EntityTypeName value, JsonSerializerOptions options)
    {
        PocotaEntity pocotaEntity = _context.Entity(value);
        writer.WriteStartObject();
        writer.WritePropertyName(pocotaEntity.IsSerialized ? "$ref" : "$id");
        pocotaEntity.SetSerialized();
        writer.WriteNumberValue(pocotaEntity.PocotaId);
@for(int i = 0; i < Model.Properties.Count; ++i)
{
    <text>        if(!pocotaEntity.IsPropertySent(@i))
        {
            pocotaEntity.MarkPropertySent(@i);
            writer.WritePropertyName(@Html.Raw($"\"{Model.Properties[i].Name}\""));
            JsonSerializer.Serialize(writer, value.@Model.Properties[i].Name, options);
        }
</text>
}
        writer.WriteEndObject();
    }
}