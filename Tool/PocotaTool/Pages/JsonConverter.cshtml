@page
@using Net.Leksi.Pocota.Tool.Pages
@using Net.Leksi.Pocota.Tool
@model JsonConverterModel
@{
}
@Html.Partial("Header", Model)
internal class @Model.ClassName@(Model.Inheritances.Count > 0 ? Html.Raw($": {string.Join(", ", Model.Inheritances)}") : string.Empty)
{
    private readonly IServiceProvider _services;
    private readonly @Model.ContractName@{}Context _dbContext;
    private readonly PocotaContext _context;
    public @Model.ClassName@{}(IServiceProvider services)
    {
        _services = services;
        _dbContext = _services.GetRequiredService@{}@Html.Raw($"<{Model.ContractName}Context>")@{}();
        _context = _services.GetRequiredService@{}@Html.Raw($"<PocotaContext>")@{}();

    }
    public override @Model.EntityTypeName? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        throw new NotImplementedException();
    }

    public override void Write(Utf8JsonWriter writer, @Model.EntityTypeName value, JsonSerializerOptions options)
    {
        bool withFieldsAccess = _services.GetRequiredService<IHttpContextAccessor>().HttpContext!
            .Request.Headers.ContainsKey(PocotaHeader.WithFieldsAccess);
        @Model.EntityTypeName@{}Pocota pocotaEntity = _context.Entity@{}@Html.Raw($"<{Model.EntityTypeName}Pocota>")@{}(value);
        writer.WriteStartObject();
        writer.WritePropertyName(pocotaEntity.IsSerialized ? "$ref" : "$id");
        pocotaEntity.IsSerialized = true;
        writer.WriteNumberValue(pocotaEntity.PocotaId);
@foreach (PropertyModel prop in Model.Properties)
{
    <text>        if(!pocotaEntity.@prop.Name@{}.IsSent)
        {
            pocotaEntity.@prop.Name@{}.IsSent = true;
            writer.WritePropertyName(@Html.Raw($"\"{prop.Name}\""));
            if(withFieldsAccess)
            {
                writer.WriteStartArray();
                writer.WriteNumberValue((int)pocotaEntity.@prop.Name@{}.Access);
            }
            JsonSerializer.Serialize(writer, value.@prop.Name, options);
            if(withFieldsAccess)
            {
                writer.WriteEndArray();
            }
        }
</text>
}
        writer.WriteEndObject();
    }
}