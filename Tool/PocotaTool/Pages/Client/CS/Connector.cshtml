@page
@using Net.Leksi.Pocota.Tool
@using Net.Leksi.Pocota.Tool.Pages.Client.CS
@model ConnectorModel
@{
}
@Html.Partial("Header", Model)
public class @Model.ClassName@(Model.Inheritances.Count > 0 ? $": {string.Join(", ", Model.Inheritances)}" : string.Empty)
{
    private readonly SemaphoreSlim _asyncLock = new(1, 1);
    private readonly @Model.ContractName@{}PocotaContext _context;
    private readonly JsonSerializerOptions _serializerOptions = new();
    public @Model.ClassName@{}(IServiceProvider services): base(services) 
    {
        _context = _services.GetRequiredService@{}@Html.Raw($"<{Model.ContractName}PocotaContext>")@{}();
        _serializerOptions.Converters.Add(
            _services.GetRequiredService@{}@Html.Raw($"<{Model.JsonConverterFactoryClassName}>")@{}()
        );
    }
@foreach (MethodModel mm in @Model.Methods)
{
    <text>    public async @Html.Raw(mm.ReturnTypeName) @mm.Name@{}(@Html.Raw(string.Join(", ", mm.Parameters.Select(p => $"{p.TypeName} {p.Name}")))) 
    {
        await _asyncLock.WaitAsync();
        try 
        {
            _context.ClearSentEntities();
            HttpRequestMessage _request = new(HttpMethod.Get, "/@Model.ContractName/@mm.Name.Replace("Async", string.Empty)");
        }
        finally 
        {
            _asyncLock.Release();
        }
    }
</text>
}
    public async Task UpdateAll() 
    {
        await _asyncLock.WaitAsync();
        try
        {
            _context.ClearSentEntities();
            HttpRequestMessage _request = new(HttpMethod.Post, "/@Model.ContractName");
            await Task.CompletedTask;
        }
        finally
        {
            _asyncLock.Release();
        }
    }
}