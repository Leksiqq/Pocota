@page
@using Net.Leksi.Pocota.Client
@using Net.Leksi.Pocota.Tool
@using Net.Leksi.Pocota.Tool.Pages.Client.CS
@model ConnectorModel
@{
}
@Html.Partial("Header", Model)
public class @Model.ClassName@(Model.Inheritances.Count > 0 ? $": {string.Join(", ", Model.Inheritances)}" : string.Empty)
{
    private readonly SemaphoreSlim _asyncLock = new(1, 1);
    private readonly @Model.ContractName@{}PocotaContext _context;
    public @Model.ClassName@{}(IServiceProvider services): base(services) 
    {
        _context = _services.GetRequiredService@{}@Html.Raw($"<{Model.ContractName}PocotaContext>")@{}();
        _serializerOptions.Converters.Add(
            _services.GetRequiredService@{}@Html.Raw($"<{Model.JsonConverterFactoryClassName}>")@{}()
        );
    }
@foreach (MethodModel mm in @Model.Methods)
{
    <text>    public async @Html.Raw(mm.ReturnTypeName) @mm.Name@{}(@Html.Raw(string.Join(", ", mm.Parameters.Select(p => $"{p.TypeName} {p.Name}")))@(mm.Parameters.Count > 0 ? ", " : string.Empty)@{}CancellationToken cancellationToken) 
    {
        await _asyncLock.WaitAsync(cancellationToken);
        try 
        {
            _context.ClearSentEntities();
            _context.KeyOnlyJson = true;
    @foreach(ParameterModel pm in mm.Parameters.Skip(mm.IsEnumeration ? 1 : 0)) {
        <text>            string _@{}@pm.Name = HttpUtility.UrlEncode(JsonSerializer.Serialize(@pm.Name, _serializerOptions));
</text>
    }
            HttpRequestMessage _request = new(
                HttpMethod.Get, 
                $"/@Model.ContractName/@mm.Name.Replace("Async", string.Empty)@(mm.Parameters.Count > (mm.IsEnumeration ? 1 : 0) ? "/" : string.Empty)@string.Join('/', mm.Parameters.Skip(mm.IsEnumeration ? 1 : 0).Select(p => $"{{_{p.Name}}}"))"
            );
        @if(mm.IsEnumeration)
        {
            <text>            await GetResponseAsyncEnumerable@{}@Html.Raw($"<{mm.Parameters[0].ItemTypeName}>")@{}(@mm.Parameters[0].Name, _request, _serializerOptions, cancellationToken);
</text>
        }
        else {
            <text>            return await GetResponseAsync@{}@Html.Raw($"<{mm.ReturnItemTypeName}>")@{}(_request, _serializerOptions, cancellationToken);
</text>
        }
        }
        finally 
        {
            _asyncLock.Release();
        }
    }
</text>
}
    public async Task UpdateAllAsync(CancellationToken cancellationToken)
    {
        await _asyncLock.WaitAsync(cancellationToken);
        try
        {
            _context.ClearSentEntities();
            _context.KeyOnlyJson = false;
            HttpRequestMessage _request = new(HttpMethod.Post, "/@Model.ContractName");
            await Task.CompletedTask;
        }
        finally
        {
            _asyncLock.Release();
        }
    }
}