@page
@using Net.Leksi.Pocota.Client
@using Net.Leksi.Pocota.Tool
@using Net.Leksi.Pocota.Tool.Pages
@using Net.Leksi.Pocota.Tool.Pages.Client.CS
@model ModelModel
@{
}
@Html.Partial("Header", Model)
public class @Model.ClassName@(Model.Inheritances.Count > 0 ? Html.Raw($": {string.Join(", ", Model.Inheritances)}") : string.Empty)
{
    private class @Model.ClassName@{}PocotaEntity: PocotaEntity, I@{}@Model.ClassName@{}PocotaEntity
    {
@foreach (PropertyModel prop in Model.Properties)
{
    <text>        public @nameof(EntityProperty) @prop.Name { get; private init;}
</text>
}
        internal @Model.ClassName@{}PocotaEntity(ulong pocotaId, PocotaContext context, @Model.ClassName owner): base(pocotaId, context, owner) 
        {
@foreach (PropertyModel prop in Model.Properties)
{
    <text>            @prop.Name = new @nameof(EntityProperty)@{}(this, s_@{}@prop.Name, typeof(@Html.Raw(prop.TypeName)));
</text>
}
        }
    }
    public event PropertyChangedEventHandler? PropertyChanged;
@foreach (PropertyModel prop in Model.Properties)
{
    <text>    private const string s_@{}@prop.Name = nameof(@prop.Name);
</text>
}
@foreach (PropertyModel prop in Model.Properties)
{
    <text>    private static readonly PropertyChangedEventArgs _@{}@prop.Name@{}PropertyChangedEventArgs = new(s_@{}@prop.Name);
</text>
}
    private readonly @Model.ClassName@{}PocotaEntity _entity;
@foreach (PropertyModel prop in Model.Properties)
{
    @if(prop.IsCollection)
    {
    <text>    private readonly @Html.Raw(prop.TypeName) _@{}@prop.Name;
</text>
    }
    else {
    <text>    private @Html.Raw(prop.TypeName)@(prop.IsNullable ? "?" : string.Empty) _@{}@prop.Name = default@(prop.IsNullable ? string.Empty : "!");
</text>
    }
}
@foreach (PropertyModel prop in Model.Properties)
{
    <text>    public @Html.Raw(prop.TypeName)@(prop.IsNullable && !prop.IsCollection ? "?" : string.Empty) @prop.Name 
    { 
        get => _@{}@prop.Name; 
    @if(!prop.IsCollection) 
    {
        <text>        set
        {
            if(_@{}@prop.Name != value && !_entity.@{}@prop.Name@{}.IsReadonly)
            {
                _@{}@prop.Name = value;
                PropertyChanged?.Invoke(this, _@{}@prop.Name@{}PropertyChangedEventArgs);
            }
        }
</text>
    }
    }
</text>
}
    IPocotaEntity IEntityOwner.Entity => _entity;
    internal @Model.ClassName@{}(ulong pocotaId, PocotaContext context)
    {
        _entity = new @Model.ClassName@{}PocotaEntity(pocotaId, context, this);
@foreach (PropertyModel prop in Model.Properties.Where(p => p.IsCollection))
{
    <text>       _@{}@prop.Name = new @nameof(MyObservableCollection<object>)@{}@Html.Raw($"<{prop.ItemTypeName}>")@{}(_entity.@{}@prop.Name); 
</text>
}
    }
}
