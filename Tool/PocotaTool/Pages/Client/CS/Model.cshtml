@page
@using Net.Leksi.Pocota.Client
@using Net.Leksi.Pocota.Tool
@using Net.Leksi.Pocota.Tool.Pages
@using Net.Leksi.Pocota.Tool.Pages.Client.CS
@model ModelModel
@{
}
@Html.Partial("Header", Model)
public class @Model.ClassName@(Model.Inheritances.Count > 0 ? Html.Raw($": {string.Join(", ", Model.Inheritances)}") : string.Empty)
{
@foreach (PropertyModel prop in Model.Properties)
{
    <text>    private class @prop.Name@{}Property(PocotaEntity entity, string name, Type type): EntityProperty(entity, name, type)
    {
        public override object? Value 
        {
            get => ((@Model.ClassName)Entity)?.@{}@prop.Name;
            set {
                if(Entity is {}) 
                {
                    if(value is @Html.Raw(prop.TypeName) val && val != ((@Model.ClassName)Entity).@{}@prop.Name)
                    {
                        ((@Model.ClassName)Entity).@{}@prop.Name = val;
                        NotifyPropertyChanged();
                    }
                    else if(value == default && ((@Model.ClassName)Entity).@{}@prop.Name != default)
                    {
                        ((@Model.ClassName)Entity).@{}@prop.Name = default;
                        NotifyPropertyChanged();
                    }
                }
            }
        }
    }
</text>
}
    private class @Model.ClassName@{}PocotaEntity(@Model.ClassName owner) : I@{}@Model.ClassName@{}PocotaEntity
    {
@foreach (PropertyModel prop in Model.Properties)
{
    <text>        public @nameof(EntityProperty) @prop.Name => owner._@prop.Name@{}EntityProperty;
</text>
}
        public ulong PocotaId => ((IPocotaEntity)owner).PocotaId;

        public EntityState State => ((IPocotaEntity)owner).State;

        public IEnumerable<EntityProperty> Properties => ((IPocotaEntity)owner).Properties;
        public IPocotaEntity Entity => this;
    }
@foreach (PropertyModel prop in Model.Properties)
{
    <text>    private const string s_@{}@prop.Name = "@prop.Name";
</text>
}
@foreach (PropertyModel prop in Model.Properties)
{
    <text>    private readonly @prop.Name@{}Property _@prop.Name@{}EntityProperty;
</text>
}
@foreach (PropertyModel prop in Model.Properties)
{
    <text>    public @Html.Raw(prop.TypeName)@(prop.IsNullable ? "?" : string.Empty) @prop.Name { get; set; }
</text>
}
    internal @Model.ClassName@{}(ulong pocotaId, PocotaContext context): base(pocotaId, context) 
    {
@foreach (PropertyModel prop in Model.Properties)
{
    <text>        _@prop.Name@{}EntityProperty = new @prop.Name@{}Property@{}(this, s_@{}@prop.Name, typeof(@Html.Raw(prop.TypeName)));
</text>
}
        _entity = new @Model.ClassName@{}PocotaEntity(this);
    }
    protected override IEnumerable<EntityProperty> GetProperties()
    {
@foreach (PropertyModel prop in Model.Properties)
{
    <text>        yield return _@prop.Name@{}EntityProperty;
</text>
}
    }
}
