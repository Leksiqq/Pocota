@page
@using Net.Leksi.Pocota.Client
@using Net.Leksi.Pocota.Tool
@using Net.Leksi.Pocota.Tool.Pages
@using Net.Leksi.Pocota.Tool.Pages.Client.CS
@model ModelModel
@{
}
@Html.Partial("Header", Model)
public class @Model.ClassName@(Model.Inheritances.Count > 0 ? Html.Raw($": {string.Join(", ", Model.Inheritances)}") : string.Empty)
{
@foreach (PropertyModel prop in Model.Properties)
{
    <text>    private class @prop.Name@{}Property(@Model.ClassName owner, IPocotaEntity entity, string name, Type type): EntityProperty(entity, name, type)
    {
        public override object? Value 
        {
            get 
            {
                if(Access is AccessKind.NotSet || Access is AccessKind.Forbidden)
                {
                    return default;
                }
                return _value;
            }
            set 
            {
                if (!IsReadonly)
                {
                    if(value is @Html.Raw(prop.TypeName) val && val != owner.@{}@prop.Name)
                    {
                        _value = val;
                        NotifyPropertyChanged();
                        owner.PropertyChanged?.Invoke(owner, _@{}@prop.Name@{}PropertyChangedEventArgs);
                    }
                    else if((@Html.Raw(prop.TypeName))value! == default && (@Html.Raw(prop.TypeName))_value! != default)
                    {
                        _value = default(@Html.Raw(prop.TypeName));
                        NotifyPropertyChanged();
                        owner.PropertyChanged?.Invoke(owner, _@{}@prop.Name@{}PropertyChangedEventArgs);
                    }
                }
            }
        }
        public override bool IsNullable => @(prop.IsNullable ? "true" : "false");
    }
</text>
}
    private class @Model.ClassName@{}PocotaEntity: PocotaEntity, I@{}@Model.ClassName@{}PocotaEntity
    {
@foreach (PropertyModel prop in Model.Properties)
{
    <text>        public @nameof(EntityProperty) @prop.Name { get; private init;}
</text>
}
        internal @Model.ClassName@{}PocotaEntity(ulong pocotaId, PocotaContext context, @Model.ClassName owner): base(pocotaId, context) 
        {
@foreach (PropertyModel prop in Model.Properties)
{
    <text>            @prop.Name = new @prop.Name@{}Property@{}(owner, this, s_@{}@prop.Name, typeof(@Html.Raw(prop.TypeName)));
</text>
}
        }
        protected override IEnumerable<EntityProperty> GetProperties()
        {
@foreach (PropertyModel prop in Model.Properties)
{
    <text>            yield return @prop.Name;
</text>
}
        }
    }
    public event PropertyChangedEventHandler? PropertyChanged;
@foreach (PropertyModel prop in Model.Properties)
{
    <text>    private const string s_@{}@prop.Name = "@prop.Name";
    private static readonly PropertyChangedEventArgs _@{}@prop.Name@{}PropertyChangedEventArgs = new(s_@{}@prop.Name);
</text>
}
    private readonly @Model.ClassName@{}PocotaEntity _entity;
@foreach (PropertyModel prop in Model.Properties)
{
    <text>    public @Html.Raw(prop.TypeName)@(prop.IsNullable ? "?" : string.Empty) @prop.Name 
    { 
        get => (@Html.Raw(prop.TypeName)@(prop.IsNullable ? "?" : string.Empty))_entity.@prop.Name@{}.Value@(prop.IsNullable ? string.Empty : "!"); 
        set => _entity.@prop.Name@{}.Value = value; 
    }
</text>
}
    IPocotaEntity IEntityOwner.Entity => _entity;
    internal @Model.ClassName@{}(ulong pocotaId, PocotaContext context)
    {
        _entity = new @Model.ClassName@{}PocotaEntity(pocotaId, context, this);
    }
}
