@page
@using Net.Leksi.Pocota.Client
@using Net.Leksi.Pocota.Tool
@using Net.Leksi.Pocota.Tool.Pages.Client.CS
@model PocotaContextModel
@{
}
@Html.Partial("Header", Model)
public class @Model.ClassName@(Model.Inheritances.Count > 0 ? $": {string.Join(", ", Model.Inheritances)}" : string.Empty)
{
    static @Model.ClassName@{}()
    {
@foreach(string type in Model.Entities)
{
    <text>        PocotaContext.s_entityCreators.Add(typeof(@type), id => new @type@{}(id));
</text>
}
    }
    public @Model.ClassName@{}(IServiceProvider services): base(services) { }
    internal bool KeyOnlyJson {  get; set; }
    internal new T CreateEntity@{}@Html.Raw("<T>")@{}() where T : @nameof(PocotaEntity)
    {
        return base.CreateEntity@{}@Html.Raw("<T>")@{}();
    }
    internal new void ClearSentEntities() {
        base.ClearSentEntities();
    }
    internal new bool IsSent(@nameof(PocotaEntity) entity) 
    {
        return base.IsSent(entity);
    }
    internal new bool SetSent(@nameof(PocotaEntity) entity)
    {
        return base.SetSent(entity);
    }
    internal new bool IsKey(@nameof(EntityProperty) property) 
    {
        return base.IsKey(property);
    }
    internal new void MarkAsKey(@nameof(EntityProperty) property)
    {
        base.MarkAsKey(property);
    }
    internal new bool KeysFilled(PocotaEntity entity)
    {
        return base.KeysFilled(entity);
    }
    internal new void SetKeysFilled(PocotaEntity entity)
    {
        base.SetKeysFilled(entity);
    }
}