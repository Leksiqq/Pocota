@page
@using Net.Leksi.Pocota.Tool.Pages.Client.CS
@using Net.Leksi.Pocota.Tool
@using Net.Leksi.Pocota.Server
@model ExtensionsModel
@{
}
@Html.Partial("Header", Model)
public static class @Model.ClassName@(Model.Inheritances.Count > 0 ? $": {string.Join(", ", Model.Inheritances)}" : string.Empty)
{
    public static IServiceCollection Add@{}@Model.ContractName@{}(
        this IServiceCollection services,
        string servicesKey = "@Model.ContractName",
        Uri? baseUri = null
    )
    {
        services.AddScoped@{}(serv => new @Model.ContractName@{}Connector@{}(serv, servicesKey, baseUri));
        services.AddScoped@{}(serv => new @Model.ContractName@{}PocotaContext@{}(serv, servicesKey));
        services.AddScoped@{}@Html.Raw($"<{Model.ContractName}JsonConverterFactory>")@{}();
        services.AddKeyedScoped@{}@Html.Raw("<PocotaContext>")@{}(servicesKey, (serv, key) => serv.GetRequiredService@{}@Html.Raw($"<{Model.ContractName}PocotaContext>")@{}());
        services.AddKeyedScoped@{}@Html.Raw("<Connector>")@{}(servicesKey, (serv, key) => serv.GetRequiredService@{}@Html.Raw($"<{Model.ContractName}Connector>")@{}());
@foreach(PropertyModel pm in Model.Properties)
{
    <text>        services.AddTransient@{}@Html.Raw($"<{pm.Name}JsonConverter>")@{}();
</text>
}
        @Html.Raw($"{Model.ContractName}PocotaContext")@{}.Touch();

        return services;
    }
}
