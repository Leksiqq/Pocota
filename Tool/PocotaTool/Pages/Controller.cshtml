@page
@using Net.Leksi.Pocota.Server
@using Net.Leksi.Pocota.Tool.Pages
@using Net.Leksi.Pocota.Tool
@model ControllerModel
@{
}
@Html.Partial("Header", Model)
public class @Model.ClassName@(Model.Inheritances.Count > 0 ? $": {string.Join(", ", Model.Inheritances)}" : string.Empty)
{
@foreach(MethodModel mm in @Model.Methods)
{
    <text>    @foreach (string attr in mm.Attributes)
    {
        <text>    @Html.Raw(attr)
</text>
    }
    public async @nameof(Task) @mm.Name@{}(@string.Join(", ", mm.Parameters.Select(p => $"string {p.Name}")))
    {
        @Model.ServiceClassName _storageService = HttpContext.RequestServices.GetRequiredService@{}@Html.Raw($"<{Model.ServiceClassName}>")@{}();
        IAccessCalculator accessCalculator = HttpContext.RequestServices.GetRequiredKeyedService@{
            }@Html.Raw($"<{nameof(IAccessCalculator)}>")@{}(typeof(@mm.ReturnTypeName));
        JsonSerializerOptions _serializerOptions = GetJsonSerializerOptions(HttpContext.RequestServices);
        HttpContext.Response.ContentType = "application/json";
    @foreach(ParameterModel pm in mm.Parameters)
    {
        <text>        @Html.Raw(pm.TypeName) _@pm.Name@{}Filter = JsonSerializer.Deserialize@{}@Html.Raw($"<{pm.TypeName}>")@{}(@pm.Name, _serializerOptions)!;
</text>
    }
    @if(mm.IsEnumeration)
    {
        <text>        await JsonSerializer.SerializeAsync(
            HttpContext.Response.Body, 
            @nameof(PocotaContext)@{}.ProcessEntitiesAsync@{}@Html.Raw($"<{mm.ReturnTypeName}>")@{}(accessCalculator, _storageService.@mm.Name@{}Async@{}(@string.Join(", ", mm.Parameters.Select(p => $"_{p.Name}Filter")))), 
            _serializerOptions
        );
</text>
    }
    else
    {
        <text>        if(await _storageService.@mm.Name@{}Async@{}(@string.Join(", ", mm.Parameters.Select(p => $"_{p.Name}Filter"))) is @mm.ReturnTypeName _@mm.ReturnTypeName@{}Result)
        {
            await JsonSerializer.SerializeAsync(
                HttpContext.Response.Body, 
                @nameof(PocotaContext)@{}.ProcessEntity@{}@Html.Raw($"<{mm.ReturnTypeName}>")@{}(accessCalculator, _@mm.ReturnTypeName@{}Result), 
                _serializerOptions
            );
        }
        else 
        {
            NotFound();
        }
</text>
    }

    }
</text>
}
    [HttpPost]
    public async Task UpdateAll@{}() {
        await Task.CompletedTask;
    }
    private static JsonSerializerOptions GetJsonSerializerOptions(IServiceProvider services)
    {
        JsonSerializerOptions _serializerOptions = new();
        _serializerOptions.Converters.Add(
            services.GetRequiredService@{}@Html.Raw($"<{Model.JsonConverterFactoryClassName}>")@{}()
        );
        return _serializerOptions;
    }
}
