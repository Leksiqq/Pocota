@page
@using Net.Leksi.Pocota.Tool.Pages
@using Net.Leksi.Pocota.Tool
@using Net.Leksi.Pocota.Server
@model ExtensionsModel
@{
}
@Html.Partial("Header", Model)
public static class @Model.ClassName@(Model.Inheritances.Count > 0 ? $": {string.Join(", ", Model.Inheritances)}" : string.Empty)
{
    public static IServiceCollection Add@{}@Model.ContractName@{}(
        this IServiceCollection services, 
        Type serviceImplementation,
        Action@{}@Html.Raw($"<IServiceCollection>")? additionalConfig = null
    )
    {
        services.AddHttpContextAccessor();
        services.AddScoped@{}@Html.Raw($"<{nameof(PocotaContext)}>")@{}();
        services.AddScoped@{}@Html.Raw($"<{Model.ContractName}JsonConverterFactory>")@{}();
        services.AddScoped@{}(typeof(@Model.ContractName@{}ServiceBase), serviceImplementation);
@foreach(PropertyModel pm in Model.Properties)
{
    <text>        services.AddTransient@{}@Html.Raw($"<{pm.Name}JsonConverter>")@{}();
        services.AddTransient@{}@Html.Raw($"<{pm.Name}PocotaEntity>")@{}();
</text>
}

        additionalConfig?.Invoke(services);

        ServiceDescriptor probe;

@foreach(PropertyModel pm in Model.Properties)
{
    <text>        probe = new ServiceDescriptor(typeof(@nameof(IAccessCalculator)), typeof(@pm.Name), typeof(@pm.Name@{}AccessBase), ServiceLifetime.Scoped);
        if(!services.Contains(probe, AccessCalculatorServicesEqualityComparer.Instance))
        {
            services.AddKeyedScoped@{}@Html.Raw($"<{nameof(IAccessCalculator)}>")@{}(typeof(@pm.Name), (s, k) => new @pm.Name@{}AccessBase(s));
        }
        else
        {
            ServiceDescriptor sd = services.Where(s => AccessCalculatorServicesEqualityComparer.Instance.Equals(probe, s)).First();
            if (sd.Lifetime is not ServiceLifetime.Scoped)
            {
                throw new InvalidOperationException($"{nameof(@nameof(IAccessCalculator))} service expected to be scoped, got: {sd}.");
            }
        }
</text>
}
       foreach (var service in services)
        {
            if (typeof(@Model.ContractName@{}DbContext).IsAssignableFrom(service.ServiceType))
            {
                ServiceDescriptor sd = new(typeof(@Model.ContractName@{}DbContext), service.ServiceType, service.Lifetime);
                services.Add(sd);
                break;
            }
        }
        return services;
    }
}
